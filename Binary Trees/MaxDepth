class Solution {
public:
    int maxDepth(TreeNode* root) {
        int count=1;
        queue<pair<TreeNode*,int>> q;
        q.push(make_pair(root,1));
        if(root==NULL)return 0;
        while(!q.empty()){
            TreeNode* temp=q.front().first;
            int tempint=q.front().second;
            q.pop();
            if(temp->left!=NULL)q.push(make_pair(temp->left,tempint+1));
            if(temp->right!=NULL)q.push(make_pair(temp->right,tempint+1));
            if(temp->left!=NULL || temp->right!=NULL) count= tempint+1;

        }
        return count;
    }
};

class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL)return 0;
        int count=1;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                TreeNode* temp=q.front();
                q.pop();
                if(temp->left!=NULL)q.push(temp->left);
                if(temp->right!=NULL)q.push(temp->right);
            }
            if(!q.empty())
            count++;
        }
        
        return count;
    }
};
