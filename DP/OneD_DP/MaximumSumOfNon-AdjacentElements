Tabulation
class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        int[] dp=new int[n];
        if(n==1) return nums[0];
        dp[0]=nums[0];
        dp[1]=Math.max(nums[0],nums[1]);
        for(int i=2;i<n;i++){
        dp[i]=Math.max(dp[i-2]+nums[i],dp[i-1]);
    }
    return dp[n-1];
}}

Memoization
import java.util.Arrays;
class Solution {
    public int fn(int[]nums,int ind, int []dp){
        if(ind==0) return dp[0]=nums[0];
        if(ind==1) return dp[1]=Math.max(nums[0],nums[1]);
        if(dp[ind]!=-1) return dp[ind];

        return dp[ind]=Math.max(fn(nums,ind-2,dp)+nums[ind],fn(nums,ind-1,dp));
    
    
    }
    public int rob(int[] nums) {
        int n=nums.length;
        int[] dp=new int[n];
        Arrays.fill(dp,-1);
        return fn(nums, n-1, dp);

}}
Question-: https://leetcode.com/problems/house-robber/description/
